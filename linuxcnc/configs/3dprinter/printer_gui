#!/usr/bin/env python

import gtk
import gobject
import gladevcp.makepins
from gladevcp.gladebuilder import GladeBuilder
import hal
import sys,os

# set up paths to files
BASE = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), ".."))
libdir = os.path.join(BASE, "lib", "python")
sys.path.insert(0, libdir)
datadir = os.path.join(BASE, "share", "linuxcnc")
#xmlname = os.path.join(datadir,"printer_gui.glade")
xmlname="/home/dabit/linuxcnc/configs/3dprinter/printer_gui.glade"

import linuxcnc

class printer_gui(object):

  def __init__(self):
    self.emc = linuxcnc
    self.command = self.emc.command()
    self.status = self.emc.stat()
    self.builder = gtk.Builder()
    self.builder.add_from_file(xmlname)
    self.halcomp = hal.component("printer_gui")
    self.builder.connect_signals(self)
    self.window = self.builder.get_object("window1")
    self.window.show()    
    self.panel = gladevcp.makepins.GladePanel(self.halcomp, xmlname, self.builder, None)
    self.halcomp.ready()
    
    # The gobject.timeout_add() function sets a function to be called at regular intervals
    gobject.timeout_add(100, self.periodic) # time between calls to the function, in milliseconds
    self.machine_status = 0
    # our selected axis to jog
    self.selectedaxis = 0
    self.jogwheel_oldvalue = 0
    self.builder.get_object("axisx_button").set_active(True)
    self.command.mode(self.emc.MODE_MANUAL);

  def periodic(self): # fetch status items and update screen
    self.status.poll()
    jogheel_newvalue = self.builder.get_object("jogwheel").get_value()
    if jogheel_newvalue != self.jogwheel_oldvalue:
    	if self.status.axis[self.selectedaxis]['homed']:
    		self.command.jog(self.emc.JOG_INCREMENT,self.selectedaxis,100,(jogheel_newvalue-self.jogwheel_oldvalue)*0.1)
    self.jogwheel_oldvalue = jogheel_newvalue
    
    return True

  def on_window1_destroy(self, widget, data=None):
    print "quit with cancel"
    gtk.main_quit()
    
  def on_xaxis_button_clicked(self, widget, data=None):
    print "Axis X button clicked, widget=",widget
    if self.builder.get_object("axisx_button").get_active() == True:
    	self.builder.get_object("axisy_button").set_active(False)
    	self.builder.get_object("axisz_button").set_active(False)
    	self.selectedaxis = 0
        
  def on_yaxis_button_clicked(self, widget, data=None):
    print "Axis Y button clicked, widget=",widget
    if self.builder.get_object("axisy_button").get_active() == True:
    	self.builder.get_object("axisx_button").set_active(False)
    	self.builder.get_object("axisz_button").set_active(False)
    	self.selectedaxis = 1
    
  def on_zaxis_button_clicked(self, widget, data=None):
    print "Axis Z button clicked, widget=",widget
    if self.builder.get_object("axisz_button").get_active() == True:
    	self.builder.get_object("axisx_button").set_active(False)
    	self.builder.get_object("axisy_button").set_active(False)
    	self.selectedaxis = 2
    	
  def on_FS_button_clicked(self, widget, data=None):
    if self.builder.get_object("FS_button").get_active() == True:
    	print "Going fullscreen"
    	self.window.fullscreen()
    else:
    	print "Leaving fullscreen"
    	self.window.unfullscreen()
    		
if __name__ == "__main__":
  app = printer_gui()
  gtk.main()

